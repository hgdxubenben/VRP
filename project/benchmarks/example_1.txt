
// A scenario is composed of a set of locations, set of orders, and a set of cars
// Each order may provide a profit, while travelling to a location causes a cost.
// A solution is a plan how to deliver all or at least some of the orders while never violating the car's capacity constraints.


// -------------- LOCATIONS --------------
// Each location has an ID, an x- and a y-coordinate.
// The location with ID 0 is the depot where all cars start and have to return to.
// The cost to travel from one locations to another is the Euclidean distance of their coordinates in the 2D plane, rounded up to the next full integer.

locationCount: 16
locationList: // ID X-COORDINATE Y-COORDINATE
0 -196 13038 // <-- depot
1 -231 13097
2 -177 13100
3 -240 12965
4 -157 12902
5 -130 13228
6 -171 12995
7 -149 13056
8 -219 12978
9 -184 12914
10 -163 12943
11 -198 13050
12 -250 13093
13 -144 12962
14 -133 12882
15 -182 12766


// -------------- ORDERS --------------
// Each order has an ID, a pick-up location, a destination location, a weight, and a profit.
// A car needs to drive to the order's pick-up location (which incurs a cost), pick the order up, drive to its destination location (which incurs a cost), and unload it there (which profits the profit).
// However, the total weight a car can transport at once is limited (see later).

orderCount: 10
orderList: // ID PICK-UP-LOCATION-ID DELIVERY-LOCATION-ID WEIGHT PROFIT
0 11 14 27 303
1 8 5 53 336
2 5 10 22 347
3 4 2 12 395
4 9 12 13 400
5 3 8 56 38
6 15 11 55 571
7 6 13 39 135
8 7 14 29 261
9 10 1 18 327


// -------------- CARS --------------
// Each car has an ID and a capacity.
// All cars are initially located at the depot (the location with ID 0) and need to return to there at the end.
// No car can load more weight as its capacity limit allows.
// Cars transport orders from their pick-up locations to their delivery locations.

carCount: 1
carList: // ID CAPACITY-LIMIT
0 110
